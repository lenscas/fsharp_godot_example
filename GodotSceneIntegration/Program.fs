open FSharp.CommandLine
open SceneFinder
open System
open SceneFinder.SceneFinder
open SceneParser
open SceneParser.SceneParser
open System.IO
open ErrorHandling


let godotProject =
    commandOption {
        names [ "g"; "godot" ]
        description "Location of the Godot project file"
        takes (format ("%s"))
        suggests (fun _ -> [ CommandSuggestion.Files None ])
    }

let nodeFolder =
    commandOption {
        names [ "n"; "nodes" ]
        description "Folder that generated nodes need to placed in"
        takes (format ("%s"))
        suggests (fun _ -> [ CommandSuggestion.Files None ])
    }

let nameSpace =
    commandOption {
        names [ "s"; "namespace" ]
        description "The namespace used to open every file"
        takes (format ("%s"))

    }


let foundOrError a b =
    match a with
    | Some(a) -> a
    | None -> b |> Exception |> raise

let parseUntilAllDone list nodeFolder nameSpace =
    let writer = SceneFileWriter.Writer.WriteSceneFile nameSpace nodeFolder
    let deps = Collections.Generic.Dictionary()

    let rec parseUntilAllDoneHelper
        (list: List<SceneParser.SceneFile>)
        (deps: Collections.Generic.Dictionary<string, string>)
        lastCount
        =

        if lastCount = list.Length then
            "dependency circle detected. Did not even know that that was possible!? Bug in parser?"
            |> Exception
            |> raise

        let lastCount = list.Length

        let res =
            list
            |> Seq.map (fun x -> (x, writer x deps))
            |> Seq.choose (fun (scene, res) ->
                match res with
                | Error(SceneFileWriter.Writer.SceneWriteErrors.MissingDependency x) ->
                    Console.WriteLine(
                        "Tried parsing scene file with missing dependencies: "
                        + x
                        + " Will push it back to the list to be parsed later"
                    )

                    scene |> Ok |> Some
                | Error x -> x |> Error |> Some
                | Ok x ->
                    Console.WriteLine("Add dependecy to parsed dependencies: " + scene.fileName + " of value " + x)

                    deps.Add(scene.fileName, x)
                    None)
            |> Seq.sequenceResultM

        match res with
        | Error x -> Error x
        | Ok list ->
            let list = list |> Seq.toList

            if list.Length = 0 then
                Ok()
            else
                parseUntilAllDoneHelper (Seq.toList list) deps lastCount

    parseUntilAllDoneHelper list deps (list.Length + 1)

let mainCommand () =
    command {
        name "main"
        description "The main command."
        opt godotProj in godotProject
        opt nodeFolder in nodeFolder
        opt nameSpace in nameSpace

        let godotProj =
            foundOrError
                godotProj
                "Missing path to godot project file, pass it using -g. Can't find scenes without this path."

        let nodeFolder =
            foundOrError
                nodeFolder
                "Missing path to folder to place generated nodes in, pass it using -n. Can't store the generated nodes somewhere without this"

        let nameSpace =
            foundOrError nameSpace "Missing the namespace that should be used, pass it using -s."

        let res = SceneFinder.getSceneFiles godotProj

        let res =
            match res with
            | Ok(x) -> x
            | Error(SceneFileError.NotValidGodotProject x) -> raise x

        printfn "full path = %s" res.fullPath
        printfn "scene files:"

        let logger = makeLogger ()
        logger.AutoFlush <- true
        let parser = parseScene logger godotProj

        let scenes =
            res.sceneFiles
            |> Seq.filter (fun x -> x.Contains("godot-fsharp-tools") |> not)
            |> Seq.map (fun x ->
                System.Console.WriteLine(x)
                x)
            |> Seq.map (fun x -> x, File.ReadLines x)
            |> Seq.map (parser)
            |> Seq.sortBy (fun x -> x.dependencies.Count)
            |> Seq.toList

        let foundError = parseUntilAllDone scenes nodeFolder nameSpace

        match foundError with
        | Error x ->
            Console.WriteLine("Ran into an error while processing scenes")
            Console.WriteLine("Error:")

            match x with
            | SceneFileWriter.Writer.SceneWriteErrors.FileExistsWithoutMagicHeader message ->
                Console.WriteLine("Tried to edit a file without the magic header")

                Console.WriteLine(
                    "This would've resulted in dataloss as it means that this file is not generated by this tool"
                )

                Console.WriteLine("File: " + message)
            | SceneFileWriter.Writer.SceneWriteErrors.MissingDependency x ->
                Console.WriteLine("Could not find a scene dependency. This should never happen")
                Console.WriteLine("Missing dependency:")
                Console.WriteLine(x)
        | Ok() -> ()

        return 0
    }

[<EntryPoint>]
let main args =
    mainCommand () |> Command.runAsEntryPoint args
